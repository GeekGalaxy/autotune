name: fs
description: Settings for fs optimizations

references:
  - https://tweaked.io/guide/kernel/
  - http://blog.neutrino.es/2013/howto-properly-activate-trim-for-your-ssd-on-linux-fstrim-lvm-and-dmcrypt/

procfs:
  vm.dirty_ratio:
    value: "80"
    description:
  vm.dirty_background_ratio:
    value: "5"
    description:
  vm.dirty_expire_centisecs:
    value: "1200"
    description:
  proc.file-max:
    value: "2097152"
    description: |
      The max amount of file handlers that the Linux kernel will
      allocate. This is one part the other part is setting the
      ulimits.
  fs.file-max:
    value: "{{ multiply .Stats.System.Memory.Physical.Total 11 }}"

files:
  "/etc/fstab":
    "noattime":
      value: '{{ eachLine | contains "noatime" }}'
    "discard":
      value: '{{ eachLine | notcontains "discard" }}'
      description: |
        Avoid having a discard mount attribute as every time a file is
        deleted the SSD will also do a TRIM for future writing. This
        will increase time it takes to delete a file.

        Better option is to run a daily/weekly cron.
      if:
        - ssd
  "/etc/security/limits.d/*":
    "ulimits":
      value: |
        List the ulimit values.

cron:
  "fs-trim":
    value: |
      #!/bin/sh
      #
      # To find which FS support trim, we check that DISC-MAX (discard max bytes)
      # is great than zero. Check discard_max_bytes documentation at
      # https://www.kernel.org/doc/Documentation/block/queue-sysfs.txt
      #
      for fs in $(lsblk -o MOUNTPOINT,DISC-MAX,FSTYPE | grep -E '^/.* [1-9]+.* ' | awk '{print $1}'); do
        fstrim "$fs"
      done
    schedule: weekly
